services:
  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    networks:
      - cognify-net

  backend:
    build:
      context: .
      dockerfile: .docker/backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - kg_data:/app/data
      - models_cache:/app/models
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      infinity:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cognify-net

  frontend:
    image: node:22-alpine
    working_dir: /app
    command: sh -c "echo 'Frontend service placeholder. In a real scenario, you would run a dev server here.' && tail -f /dev/null"
    volumes:
      - ./frontend:/app
    networks:
      - cognify-net

  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cognify}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      POSTGRES_DB: ${POSTGRES_DB:-cognify_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-cognify} -d ${POSTGRES_DB:-cognify_db}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cognify-net

  infinity:
    image: infiniflow/infinity:v0.6.0-dev3
    ports:
      - "23817:23817"
      - "9090:9090"
    volumes:
      - infinity_data:/var/infinity
    networks:
      - cognify-net

  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cognify-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - cognify-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  cognify-net:
    driver: bridge

volumes:
  postgres_data:
  infinity_data:
  elasticsearch_data:
  redis_data:
  kg_data:
  models_cache:
